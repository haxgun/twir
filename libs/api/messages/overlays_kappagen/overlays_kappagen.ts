/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter optimize_code_size,generate_dependencies,eslint_disable,server_none
// @generated from protobuf file "messages/overlays_kappagen/overlays_kappagen.proto" (package "messages.overlays_kappagen", syntax proto3)
// tslint:disable
import { MessageType } from "@protobuf-ts/runtime";
import { TwirEventType } from "../events/events";
/**
 * @generated from protobuf message messages.overlays_kappagen.Settings
 */
export interface Settings {
    /**
     * @generated from protobuf field: messages.overlays_kappagen.Settings.Emotes emotes = 1;
     */
    emotes?: Settings_Emotes;
    /**
     * @generated from protobuf field: messages.overlays_kappagen.Settings.Size size = 2;
     */
    size?: Settings_Size;
    /**
     * @generated from protobuf field: messages.overlays_kappagen.Settings.Cube cube = 3;
     */
    cube?: Settings_Cube;
    /**
     * @generated from protobuf field: messages.overlays_kappagen.Settings.Animation animation = 4;
     */
    animation?: Settings_Animation;
    /**
     * @generated from protobuf field: repeated messages.overlays_kappagen.Settings.AnimationSettings animations = 5;
     */
    animations: Settings_AnimationSettings[];
    /**
     * @generated from protobuf field: bool enableRave = 6;
     */
    enableRave: boolean;
    /**
     * @generated from protobuf field: repeated messages.overlays_kappagen.Settings.Event events = 7;
     */
    events: Settings_Event[];
    /**
     * @generated from protobuf field: bool enable_spawn = 8;
     */
    enableSpawn: boolean;
    /**
     * @generated from protobuf field: repeated string excluded_emotes = 9;
     */
    excludedEmotes: string[];
}
/**
 * @generated from protobuf message messages.overlays_kappagen.Settings.Emotes
 */
export interface Settings_Emotes {
    /**
     * @generated from protobuf field: int32 time = 1;
     */
    time: number;
    /**
     * @generated from protobuf field: int32 max = 2;
     */
    max: number;
    /**
     * @generated from protobuf field: int32 queue = 3;
     */
    queue: number;
    /**
     * @generated from protobuf field: bool ffz_enabled = 4;
     */
    ffzEnabled: boolean;
    /**
     * @generated from protobuf field: bool bttv_enabled = 5;
     */
    bttvEnabled: boolean;
    /**
     * @generated from protobuf field: bool seven_tv_enabled = 6;
     */
    sevenTvEnabled: boolean;
    /**
     * @generated from protobuf field: messages.overlays_kappagen.EmojiStyle emoji_style = 7;
     */
    emojiStyle: EmojiStyle;
}
/**
 * @generated from protobuf message messages.overlays_kappagen.Settings.Size
 */
export interface Settings_Size {
    /**
     * @generated from protobuf field: double ratio_normal = 1;
     */
    ratioNormal: number;
    /**
     * @generated from protobuf field: double ratio_small = 2;
     */
    ratioSmall: number;
    /**
     * @generated from protobuf field: int32 min = 3;
     */
    min: number;
    /**
     * @generated from protobuf field: int32 max = 4;
     */
    max: number;
}
/**
 * @generated from protobuf message messages.overlays_kappagen.Settings.Cube
 */
export interface Settings_Cube {
    /**
     * @generated from protobuf field: int32 speed = 1;
     */
    speed: number;
}
/**
 * @generated from protobuf message messages.overlays_kappagen.Settings.Animation
 */
export interface Settings_Animation {
    /**
     * @generated from protobuf field: bool fade_in = 1;
     */
    fadeIn: boolean;
    /**
     * @generated from protobuf field: bool fade_out = 2;
     */
    fadeOut: boolean;
    /**
     * @generated from protobuf field: bool zoom_in = 3;
     */
    zoomIn: boolean;
    /**
     * @generated from protobuf field: bool zoom_out = 4;
     */
    zoomOut: boolean;
}
/**
 * @generated from protobuf message messages.overlays_kappagen.Settings.AnimationSettings
 */
export interface Settings_AnimationSettings {
    /**
     * @generated from protobuf field: string style = 1;
     */
    style: string;
    /**
     * @generated from protobuf field: messages.overlays_kappagen.Settings.AnimationSettings.Prefs prefs = 2;
     */
    prefs?: Settings_AnimationSettings_Prefs;
    /**
     * @generated from protobuf field: optional int32 count = 3;
     */
    count?: number;
    /**
     * @generated from protobuf field: bool enabled = 4;
     */
    enabled: boolean;
}
/**
 * @generated from protobuf message messages.overlays_kappagen.Settings.AnimationSettings.Prefs
 */
export interface Settings_AnimationSettings_Prefs {
    /**
     * @generated from protobuf field: optional double size = 1;
     */
    size?: number;
    /**
     * @generated from protobuf field: optional bool center = 2;
     */
    center?: boolean;
    /**
     * @generated from protobuf field: optional int32 speed = 3;
     */
    speed?: number;
    /**
     * @generated from protobuf field: optional bool faces = 4;
     */
    faces?: boolean;
    /**
     * @generated from protobuf field: repeated string message = 5;
     */
    message: string[];
    /**
     * @generated from protobuf field: optional int32 time = 6;
     */
    time?: number;
}
/**
 * @generated from protobuf message messages.overlays_kappagen.Settings.Event
 */
export interface Settings_Event {
    /**
     * @generated from protobuf field: messages.events.TwirEventType event = 1;
     */
    event: TwirEventType;
    /**
     * @generated from protobuf field: repeated string disabled_styles = 2;
     */
    disabledStyles: string[];
    /**
     * @generated from protobuf field: bool enabled = 3;
     */
    enabled: boolean;
}
/**
 * @generated from protobuf enum messages.overlays_kappagen.EmojiStyle
 */
export enum EmojiStyle {
    /**
     * @generated from protobuf enum value: None = 0;
     */
    None = 0,
    /**
     * @generated from protobuf enum value: Twemoji = 1;
     */
    Twemoji = 1,
    /**
     * @generated from protobuf enum value: Openmoji = 2;
     */
    Openmoji = 2,
    /**
     * @generated from protobuf enum value: Noto = 3;
     */
    Noto = 3,
    /**
     * @generated from protobuf enum value: Blobmoji = 4;
     */
    Blobmoji = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class Settings$Type extends MessageType<Settings> {
    constructor() {
        super("messages.overlays_kappagen.Settings", [
            { no: 1, name: "emotes", kind: "message", T: () => Settings_Emotes },
            { no: 2, name: "size", kind: "message", T: () => Settings_Size },
            { no: 3, name: "cube", kind: "message", T: () => Settings_Cube },
            { no: 4, name: "animation", kind: "message", T: () => Settings_Animation },
            { no: 5, name: "animations", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Settings_AnimationSettings },
            { no: 6, name: "enableRave", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "events", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Settings_Event },
            { no: 8, name: "enable_spawn", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "excluded_emotes", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message messages.overlays_kappagen.Settings
 */
export const Settings = new Settings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Settings_Emotes$Type extends MessageType<Settings_Emotes> {
    constructor() {
        super("messages.overlays_kappagen.Settings.Emotes", [
            { no: 1, name: "time", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "max", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "queue", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "ffz_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "bttv_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "seven_tv_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "emoji_style", kind: "enum", T: () => ["messages.overlays_kappagen.EmojiStyle", EmojiStyle] }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message messages.overlays_kappagen.Settings.Emotes
 */
export const Settings_Emotes = new Settings_Emotes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Settings_Size$Type extends MessageType<Settings_Size> {
    constructor() {
        super("messages.overlays_kappagen.Settings.Size", [
            { no: 1, name: "ratio_normal", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "ratio_small", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "min", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "max", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message messages.overlays_kappagen.Settings.Size
 */
export const Settings_Size = new Settings_Size$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Settings_Cube$Type extends MessageType<Settings_Cube> {
    constructor() {
        super("messages.overlays_kappagen.Settings.Cube", [
            { no: 1, name: "speed", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message messages.overlays_kappagen.Settings.Cube
 */
export const Settings_Cube = new Settings_Cube$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Settings_Animation$Type extends MessageType<Settings_Animation> {
    constructor() {
        super("messages.overlays_kappagen.Settings.Animation", [
            { no: 1, name: "fade_in", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "fade_out", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "zoom_in", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "zoom_out", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message messages.overlays_kappagen.Settings.Animation
 */
export const Settings_Animation = new Settings_Animation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Settings_AnimationSettings$Type extends MessageType<Settings_AnimationSettings> {
    constructor() {
        super("messages.overlays_kappagen.Settings.AnimationSettings", [
            { no: 1, name: "style", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "prefs", kind: "message", T: () => Settings_AnimationSettings_Prefs },
            { no: 3, name: "count", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message messages.overlays_kappagen.Settings.AnimationSettings
 */
export const Settings_AnimationSettings = new Settings_AnimationSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Settings_AnimationSettings_Prefs$Type extends MessageType<Settings_AnimationSettings_Prefs> {
    constructor() {
        super("messages.overlays_kappagen.Settings.AnimationSettings.Prefs", [
            { no: 1, name: "size", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "center", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "speed", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "faces", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "message", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "time", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message messages.overlays_kappagen.Settings.AnimationSettings.Prefs
 */
export const Settings_AnimationSettings_Prefs = new Settings_AnimationSettings_Prefs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Settings_Event$Type extends MessageType<Settings_Event> {
    constructor() {
        super("messages.overlays_kappagen.Settings.Event", [
            { no: 1, name: "event", kind: "enum", T: () => ["messages.events.TwirEventType", TwirEventType] },
            { no: 2, name: "disabled_styles", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message messages.overlays_kappagen.Settings.Event
 */
export const Settings_Event = new Settings_Event$Type();
