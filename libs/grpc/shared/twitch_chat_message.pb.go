// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: shared/twitch_chat_message.proto

package shared

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FragmentType int32

const (
	FragmentType_TEXT      FragmentType = 0
	FragmentType_CHEERMOTE FragmentType = 1
	FragmentType_EMOTE     FragmentType = 2
	FragmentType_MENTION   FragmentType = 3
)

// Enum value maps for FragmentType.
var (
	FragmentType_name = map[int32]string{
		0: "TEXT",
		1: "CHEERMOTE",
		2: "EMOTE",
		3: "MENTION",
	}
	FragmentType_value = map[string]int32{
		"TEXT":      0,
		"CHEERMOTE": 1,
		"EMOTE":     2,
		"MENTION":   3,
	}
)

func (x FragmentType) Enum() *FragmentType {
	p := new(FragmentType)
	*p = x
	return p
}

func (x FragmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FragmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_shared_twitch_chat_message_proto_enumTypes[0].Descriptor()
}

func (FragmentType) Type() protoreflect.EnumType {
	return &file_shared_twitch_chat_message_proto_enumTypes[0]
}

func (x FragmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FragmentType.Descriptor instead.
func (FragmentType) EnumDescriptor() ([]byte, []int) {
	return file_shared_twitch_chat_message_proto_rawDescGZIP(), []int{0}
}

type ChatMessageMessageFragmentCheermote struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Prefix        string                 `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Bits          int64                  `protobuf:"varint,2,opt,name=bits,proto3" json:"bits,omitempty"`
	Tier          int64                  `protobuf:"varint,3,opt,name=tier,proto3" json:"tier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMessageMessageFragmentCheermote) Reset() {
	*x = ChatMessageMessageFragmentCheermote{}
	mi := &file_shared_twitch_chat_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessageMessageFragmentCheermote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageMessageFragmentCheermote) ProtoMessage() {}

func (x *ChatMessageMessageFragmentCheermote) ProtoReflect() protoreflect.Message {
	mi := &file_shared_twitch_chat_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageMessageFragmentCheermote.ProtoReflect.Descriptor instead.
func (*ChatMessageMessageFragmentCheermote) Descriptor() ([]byte, []int) {
	return file_shared_twitch_chat_message_proto_rawDescGZIP(), []int{0}
}

func (x *ChatMessageMessageFragmentCheermote) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *ChatMessageMessageFragmentCheermote) GetBits() int64 {
	if x != nil {
		return x.Bits
	}
	return 0
}

func (x *ChatMessageMessageFragmentCheermote) GetTier() int64 {
	if x != nil {
		return x.Tier
	}
	return 0
}

type ChatMessageMessageFragmentEmote struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EmoteSetId    string                 `protobuf:"bytes,2,opt,name=emote_set_id,json=emoteSetId,proto3" json:"emote_set_id,omitempty"`
	OwnerId       string                 `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Format        []string               `protobuf:"bytes,4,rep,name=format,proto3" json:"format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMessageMessageFragmentEmote) Reset() {
	*x = ChatMessageMessageFragmentEmote{}
	mi := &file_shared_twitch_chat_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessageMessageFragmentEmote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageMessageFragmentEmote) ProtoMessage() {}

func (x *ChatMessageMessageFragmentEmote) ProtoReflect() protoreflect.Message {
	mi := &file_shared_twitch_chat_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageMessageFragmentEmote.ProtoReflect.Descriptor instead.
func (*ChatMessageMessageFragmentEmote) Descriptor() ([]byte, []int) {
	return file_shared_twitch_chat_message_proto_rawDescGZIP(), []int{1}
}

func (x *ChatMessageMessageFragmentEmote) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChatMessageMessageFragmentEmote) GetEmoteSetId() string {
	if x != nil {
		return x.EmoteSetId
	}
	return ""
}

func (x *ChatMessageMessageFragmentEmote) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *ChatMessageMessageFragmentEmote) GetFormat() []string {
	if x != nil {
		return x.Format
	}
	return nil
}

type ChatMessageMessageFragmentMention struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName      string                 `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	UserLogin     string                 `protobuf:"bytes,3,opt,name=user_login,json=userLogin,proto3" json:"user_login,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMessageMessageFragmentMention) Reset() {
	*x = ChatMessageMessageFragmentMention{}
	mi := &file_shared_twitch_chat_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessageMessageFragmentMention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageMessageFragmentMention) ProtoMessage() {}

func (x *ChatMessageMessageFragmentMention) ProtoReflect() protoreflect.Message {
	mi := &file_shared_twitch_chat_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageMessageFragmentMention.ProtoReflect.Descriptor instead.
func (*ChatMessageMessageFragmentMention) Descriptor() ([]byte, []int) {
	return file_shared_twitch_chat_message_proto_rawDescGZIP(), []int{2}
}

func (x *ChatMessageMessageFragmentMention) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ChatMessageMessageFragmentMention) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ChatMessageMessageFragmentMention) GetUserLogin() string {
	if x != nil {
		return x.UserLogin
	}
	return ""
}

type ChatMessageMessageFragment struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Type          FragmentType                         `protobuf:"varint,1,opt,name=type,proto3,enum=shared.FragmentType" json:"type,omitempty"`
	Text          string                               `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Cheermote     *ChatMessageMessageFragmentCheermote `protobuf:"bytes,3,opt,name=cheermote,proto3" json:"cheermote,omitempty"`
	Emote         *ChatMessageMessageFragmentEmote     `protobuf:"bytes,4,opt,name=emote,proto3" json:"emote,omitempty"`
	Mention       *ChatMessageMessageFragmentMention   `protobuf:"bytes,5,opt,name=mention,proto3" json:"mention,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMessageMessageFragment) Reset() {
	*x = ChatMessageMessageFragment{}
	mi := &file_shared_twitch_chat_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessageMessageFragment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageMessageFragment) ProtoMessage() {}

func (x *ChatMessageMessageFragment) ProtoReflect() protoreflect.Message {
	mi := &file_shared_twitch_chat_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageMessageFragment.ProtoReflect.Descriptor instead.
func (*ChatMessageMessageFragment) Descriptor() ([]byte, []int) {
	return file_shared_twitch_chat_message_proto_rawDescGZIP(), []int{3}
}

func (x *ChatMessageMessageFragment) GetType() FragmentType {
	if x != nil {
		return x.Type
	}
	return FragmentType_TEXT
}

func (x *ChatMessageMessageFragment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ChatMessageMessageFragment) GetCheermote() *ChatMessageMessageFragmentCheermote {
	if x != nil {
		return x.Cheermote
	}
	return nil
}

func (x *ChatMessageMessageFragment) GetEmote() *ChatMessageMessageFragmentEmote {
	if x != nil {
		return x.Emote
	}
	return nil
}

func (x *ChatMessageMessageFragment) GetMention() *ChatMessageMessageFragmentMention {
	if x != nil {
		return x.Mention
	}
	return nil
}

type ChatMessageMessage struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Text          string                        `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Fragments     []*ChatMessageMessageFragment `protobuf:"bytes,2,rep,name=fragments,proto3" json:"fragments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMessageMessage) Reset() {
	*x = ChatMessageMessage{}
	mi := &file_shared_twitch_chat_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessageMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageMessage) ProtoMessage() {}

func (x *ChatMessageMessage) ProtoReflect() protoreflect.Message {
	mi := &file_shared_twitch_chat_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageMessage.ProtoReflect.Descriptor instead.
func (*ChatMessageMessage) Descriptor() ([]byte, []int) {
	return file_shared_twitch_chat_message_proto_rawDescGZIP(), []int{4}
}

func (x *ChatMessageMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ChatMessageMessage) GetFragments() []*ChatMessageMessageFragment {
	if x != nil {
		return x.Fragments
	}
	return nil
}

type ChatMessageBadge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SetId         string                 `protobuf:"bytes,2,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
	Info          string                 `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMessageBadge) Reset() {
	*x = ChatMessageBadge{}
	mi := &file_shared_twitch_chat_message_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessageBadge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageBadge) ProtoMessage() {}

func (x *ChatMessageBadge) ProtoReflect() protoreflect.Message {
	mi := &file_shared_twitch_chat_message_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageBadge.ProtoReflect.Descriptor instead.
func (*ChatMessageBadge) Descriptor() ([]byte, []int) {
	return file_shared_twitch_chat_message_proto_rawDescGZIP(), []int{5}
}

func (x *ChatMessageBadge) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChatMessageBadge) GetSetId() string {
	if x != nil {
		return x.SetId
	}
	return ""
}

func (x *ChatMessageBadge) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type ChatMessageCheer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bits          int64                  `protobuf:"varint,1,opt,name=bits,proto3" json:"bits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMessageCheer) Reset() {
	*x = ChatMessageCheer{}
	mi := &file_shared_twitch_chat_message_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessageCheer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageCheer) ProtoMessage() {}

func (x *ChatMessageCheer) ProtoReflect() protoreflect.Message {
	mi := &file_shared_twitch_chat_message_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageCheer.ProtoReflect.Descriptor instead.
func (*ChatMessageCheer) Descriptor() ([]byte, []int) {
	return file_shared_twitch_chat_message_proto_rawDescGZIP(), []int{6}
}

func (x *ChatMessageCheer) GetBits() int64 {
	if x != nil {
		return x.Bits
	}
	return 0
}

type ChatMessageReply struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ParentMessageId   string                 `protobuf:"bytes,1,opt,name=parent_message_id,json=parentMessageId,proto3" json:"parent_message_id,omitempty"`
	ParentMessageBody string                 `protobuf:"bytes,2,opt,name=parent_message_body,json=parentMessageBody,proto3" json:"parent_message_body,omitempty"`
	ParentUserId      string                 `protobuf:"bytes,3,opt,name=parent_user_id,json=parentUserId,proto3" json:"parent_user_id,omitempty"`
	ParentUserName    string                 `protobuf:"bytes,4,opt,name=parent_user_name,json=parentUserName,proto3" json:"parent_user_name,omitempty"`
	ParentUserLogin   string                 `protobuf:"bytes,5,opt,name=parent_user_login,json=parentUserLogin,proto3" json:"parent_user_login,omitempty"`
	ThreadMessageId   string                 `protobuf:"bytes,6,opt,name=thread_message_id,json=threadMessageId,proto3" json:"thread_message_id,omitempty"`
	ThreadUserId      string                 `protobuf:"bytes,7,opt,name=thread_user_id,json=threadUserId,proto3" json:"thread_user_id,omitempty"`
	ThreadUserName    string                 `protobuf:"bytes,8,opt,name=thread_user_name,json=threadUserName,proto3" json:"thread_user_name,omitempty"`
	ThreadUserLogin   string                 `protobuf:"bytes,9,opt,name=thread_user_login,json=threadUserLogin,proto3" json:"thread_user_login,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ChatMessageReply) Reset() {
	*x = ChatMessageReply{}
	mi := &file_shared_twitch_chat_message_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageReply) ProtoMessage() {}

func (x *ChatMessageReply) ProtoReflect() protoreflect.Message {
	mi := &file_shared_twitch_chat_message_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageReply.ProtoReflect.Descriptor instead.
func (*ChatMessageReply) Descriptor() ([]byte, []int) {
	return file_shared_twitch_chat_message_proto_rawDescGZIP(), []int{7}
}

func (x *ChatMessageReply) GetParentMessageId() string {
	if x != nil {
		return x.ParentMessageId
	}
	return ""
}

func (x *ChatMessageReply) GetParentMessageBody() string {
	if x != nil {
		return x.ParentMessageBody
	}
	return ""
}

func (x *ChatMessageReply) GetParentUserId() string {
	if x != nil {
		return x.ParentUserId
	}
	return ""
}

func (x *ChatMessageReply) GetParentUserName() string {
	if x != nil {
		return x.ParentUserName
	}
	return ""
}

func (x *ChatMessageReply) GetParentUserLogin() string {
	if x != nil {
		return x.ParentUserLogin
	}
	return ""
}

func (x *ChatMessageReply) GetThreadMessageId() string {
	if x != nil {
		return x.ThreadMessageId
	}
	return ""
}

func (x *ChatMessageReply) GetThreadUserId() string {
	if x != nil {
		return x.ThreadUserId
	}
	return ""
}

func (x *ChatMessageReply) GetThreadUserName() string {
	if x != nil {
		return x.ThreadUserName
	}
	return ""
}

func (x *ChatMessageReply) GetThreadUserLogin() string {
	if x != nil {
		return x.ThreadUserLogin
	}
	return ""
}

type TwitchChatMessage struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	BroadcasterUserId           string                 `protobuf:"bytes,1,opt,name=broadcaster_user_id,json=broadcasterUserId,proto3" json:"broadcaster_user_id,omitempty"`
	BroadcasterUserName         string                 `protobuf:"bytes,2,opt,name=broadcaster_user_name,json=broadcasterUserName,proto3" json:"broadcaster_user_name,omitempty"`
	BroadcasterUserLogin        string                 `protobuf:"bytes,3,opt,name=broadcaster_user_login,json=broadcasterUserLogin,proto3" json:"broadcaster_user_login,omitempty"`
	ChatterUserId               string                 `protobuf:"bytes,4,opt,name=chatter_user_id,json=chatterUserId,proto3" json:"chatter_user_id,omitempty"`
	ChatterUserName             string                 `protobuf:"bytes,5,opt,name=chatter_user_name,json=chatterUserName,proto3" json:"chatter_user_name,omitempty"`
	ChatterUserLogin            string                 `protobuf:"bytes,6,opt,name=chatter_user_login,json=chatterUserLogin,proto3" json:"chatter_user_login,omitempty"`
	MessageId                   string                 `protobuf:"bytes,7,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Message                     *ChatMessageMessage    `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	Color                       string                 `protobuf:"bytes,9,opt,name=color,proto3" json:"color,omitempty"`
	Badges                      []*ChatMessageBadge    `protobuf:"bytes,10,rep,name=badges,proto3" json:"badges,omitempty"`
	MessageType                 string                 `protobuf:"bytes,11,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	Cheer                       *ChatMessageCheer      `protobuf:"bytes,12,opt,name=cheer,proto3" json:"cheer,omitempty"`
	Reply                       *ChatMessageReply      `protobuf:"bytes,13,opt,name=reply,proto3" json:"reply,omitempty"`
	ChannelPointsCustomRewardId string                 `protobuf:"bytes,14,opt,name=channel_points_custom_reward_id,json=channelPointsCustomRewardId,proto3" json:"channel_points_custom_reward_id,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *TwitchChatMessage) Reset() {
	*x = TwitchChatMessage{}
	mi := &file_shared_twitch_chat_message_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TwitchChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwitchChatMessage) ProtoMessage() {}

func (x *TwitchChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_shared_twitch_chat_message_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwitchChatMessage.ProtoReflect.Descriptor instead.
func (*TwitchChatMessage) Descriptor() ([]byte, []int) {
	return file_shared_twitch_chat_message_proto_rawDescGZIP(), []int{8}
}

func (x *TwitchChatMessage) GetBroadcasterUserId() string {
	if x != nil {
		return x.BroadcasterUserId
	}
	return ""
}

func (x *TwitchChatMessage) GetBroadcasterUserName() string {
	if x != nil {
		return x.BroadcasterUserName
	}
	return ""
}

func (x *TwitchChatMessage) GetBroadcasterUserLogin() string {
	if x != nil {
		return x.BroadcasterUserLogin
	}
	return ""
}

func (x *TwitchChatMessage) GetChatterUserId() string {
	if x != nil {
		return x.ChatterUserId
	}
	return ""
}

func (x *TwitchChatMessage) GetChatterUserName() string {
	if x != nil {
		return x.ChatterUserName
	}
	return ""
}

func (x *TwitchChatMessage) GetChatterUserLogin() string {
	if x != nil {
		return x.ChatterUserLogin
	}
	return ""
}

func (x *TwitchChatMessage) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *TwitchChatMessage) GetMessage() *ChatMessageMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *TwitchChatMessage) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *TwitchChatMessage) GetBadges() []*ChatMessageBadge {
	if x != nil {
		return x.Badges
	}
	return nil
}

func (x *TwitchChatMessage) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *TwitchChatMessage) GetCheer() *ChatMessageCheer {
	if x != nil {
		return x.Cheer
	}
	return nil
}

func (x *TwitchChatMessage) GetReply() *ChatMessageReply {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *TwitchChatMessage) GetChannelPointsCustomRewardId() string {
	if x != nil {
		return x.ChannelPointsCustomRewardId
	}
	return ""
}

var File_shared_twitch_chat_message_proto protoreflect.FileDescriptor

const file_shared_twitch_chat_message_proto_rawDesc = "" +
	"\n" +
	" shared/twitch_chat_message.proto\x12\x06shared\x1a\x1bgoogle/protobuf/empty.proto\"e\n" +
	"#ChatMessageMessageFragmentCheermote\x12\x16\n" +
	"\x06prefix\x18\x01 \x01(\tR\x06prefix\x12\x12\n" +
	"\x04bits\x18\x02 \x01(\x03R\x04bits\x12\x12\n" +
	"\x04tier\x18\x03 \x01(\x03R\x04tier\"\x86\x01\n" +
	"\x1fChatMessageMessageFragmentEmote\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12 \n" +
	"\femote_set_id\x18\x02 \x01(\tR\n" +
	"emoteSetId\x12\x19\n" +
	"\bowner_id\x18\x03 \x01(\tR\aownerId\x12\x16\n" +
	"\x06format\x18\x04 \x03(\tR\x06format\"x\n" +
	"!ChatMessageMessageFragmentMention\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1b\n" +
	"\tuser_name\x18\x02 \x01(\tR\buserName\x12\x1d\n" +
	"\n" +
	"user_login\x18\x03 \x01(\tR\tuserLogin\"\xa9\x02\n" +
	"\x1aChatMessageMessageFragment\x12(\n" +
	"\x04type\x18\x01 \x01(\x0e2\x14.shared.FragmentTypeR\x04type\x12\x12\n" +
	"\x04text\x18\x02 \x01(\tR\x04text\x12I\n" +
	"\tcheermote\x18\x03 \x01(\v2+.shared.ChatMessageMessageFragmentCheermoteR\tcheermote\x12=\n" +
	"\x05emote\x18\x04 \x01(\v2'.shared.ChatMessageMessageFragmentEmoteR\x05emote\x12C\n" +
	"\amention\x18\x05 \x01(\v2).shared.ChatMessageMessageFragmentMentionR\amention\"j\n" +
	"\x12ChatMessageMessage\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\x12@\n" +
	"\tfragments\x18\x02 \x03(\v2\".shared.ChatMessageMessageFragmentR\tfragments\"M\n" +
	"\x10ChatMessageBadge\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x15\n" +
	"\x06set_id\x18\x02 \x01(\tR\x05setId\x12\x12\n" +
	"\x04info\x18\x03 \x01(\tR\x04info\"&\n" +
	"\x10ChatMessageCheer\x12\x12\n" +
	"\x04bits\x18\x01 \x01(\x03R\x04bits\"\x92\x03\n" +
	"\x10ChatMessageReply\x12*\n" +
	"\x11parent_message_id\x18\x01 \x01(\tR\x0fparentMessageId\x12.\n" +
	"\x13parent_message_body\x18\x02 \x01(\tR\x11parentMessageBody\x12$\n" +
	"\x0eparent_user_id\x18\x03 \x01(\tR\fparentUserId\x12(\n" +
	"\x10parent_user_name\x18\x04 \x01(\tR\x0eparentUserName\x12*\n" +
	"\x11parent_user_login\x18\x05 \x01(\tR\x0fparentUserLogin\x12*\n" +
	"\x11thread_message_id\x18\x06 \x01(\tR\x0fthreadMessageId\x12$\n" +
	"\x0ethread_user_id\x18\a \x01(\tR\fthreadUserId\x12(\n" +
	"\x10thread_user_name\x18\b \x01(\tR\x0ethreadUserName\x12*\n" +
	"\x11thread_user_login\x18\t \x01(\tR\x0fthreadUserLogin\"\x95\x05\n" +
	"\x11TwitchChatMessage\x12.\n" +
	"\x13broadcaster_user_id\x18\x01 \x01(\tR\x11broadcasterUserId\x122\n" +
	"\x15broadcaster_user_name\x18\x02 \x01(\tR\x13broadcasterUserName\x124\n" +
	"\x16broadcaster_user_login\x18\x03 \x01(\tR\x14broadcasterUserLogin\x12&\n" +
	"\x0fchatter_user_id\x18\x04 \x01(\tR\rchatterUserId\x12*\n" +
	"\x11chatter_user_name\x18\x05 \x01(\tR\x0fchatterUserName\x12,\n" +
	"\x12chatter_user_login\x18\x06 \x01(\tR\x10chatterUserLogin\x12\x1d\n" +
	"\n" +
	"message_id\x18\a \x01(\tR\tmessageId\x124\n" +
	"\amessage\x18\b \x01(\v2\x1a.shared.ChatMessageMessageR\amessage\x12\x14\n" +
	"\x05color\x18\t \x01(\tR\x05color\x120\n" +
	"\x06badges\x18\n" +
	" \x03(\v2\x18.shared.ChatMessageBadgeR\x06badges\x12!\n" +
	"\fmessage_type\x18\v \x01(\tR\vmessageType\x12.\n" +
	"\x05cheer\x18\f \x01(\v2\x18.shared.ChatMessageCheerR\x05cheer\x12.\n" +
	"\x05reply\x18\r \x01(\v2\x18.shared.ChatMessageReplyR\x05reply\x12D\n" +
	"\x1fchannel_points_custom_reward_id\x18\x0e \x01(\tR\x1bchannelPointsCustomRewardId*?\n" +
	"\fFragmentType\x12\b\n" +
	"\x04TEXT\x10\x00\x12\r\n" +
	"\tCHEERMOTE\x10\x01\x12\t\n" +
	"\x05EMOTE\x10\x02\x12\v\n" +
	"\aMENTION\x10\x03B*Z(github.com/twirapp/twir/libs/grpc/sharedb\x06proto3"

var (
	file_shared_twitch_chat_message_proto_rawDescOnce sync.Once
	file_shared_twitch_chat_message_proto_rawDescData []byte
)

func file_shared_twitch_chat_message_proto_rawDescGZIP() []byte {
	file_shared_twitch_chat_message_proto_rawDescOnce.Do(func() {
		file_shared_twitch_chat_message_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_shared_twitch_chat_message_proto_rawDesc), len(file_shared_twitch_chat_message_proto_rawDesc)))
	})
	return file_shared_twitch_chat_message_proto_rawDescData
}

var file_shared_twitch_chat_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_shared_twitch_chat_message_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_shared_twitch_chat_message_proto_goTypes = []any{
	(FragmentType)(0), // 0: shared.FragmentType
	(*ChatMessageMessageFragmentCheermote)(nil), // 1: shared.ChatMessageMessageFragmentCheermote
	(*ChatMessageMessageFragmentEmote)(nil),     // 2: shared.ChatMessageMessageFragmentEmote
	(*ChatMessageMessageFragmentMention)(nil),   // 3: shared.ChatMessageMessageFragmentMention
	(*ChatMessageMessageFragment)(nil),          // 4: shared.ChatMessageMessageFragment
	(*ChatMessageMessage)(nil),                  // 5: shared.ChatMessageMessage
	(*ChatMessageBadge)(nil),                    // 6: shared.ChatMessageBadge
	(*ChatMessageCheer)(nil),                    // 7: shared.ChatMessageCheer
	(*ChatMessageReply)(nil),                    // 8: shared.ChatMessageReply
	(*TwitchChatMessage)(nil),                   // 9: shared.TwitchChatMessage
}
var file_shared_twitch_chat_message_proto_depIdxs = []int32{
	0, // 0: shared.ChatMessageMessageFragment.type:type_name -> shared.FragmentType
	1, // 1: shared.ChatMessageMessageFragment.cheermote:type_name -> shared.ChatMessageMessageFragmentCheermote
	2, // 2: shared.ChatMessageMessageFragment.emote:type_name -> shared.ChatMessageMessageFragmentEmote
	3, // 3: shared.ChatMessageMessageFragment.mention:type_name -> shared.ChatMessageMessageFragmentMention
	4, // 4: shared.ChatMessageMessage.fragments:type_name -> shared.ChatMessageMessageFragment
	5, // 5: shared.TwitchChatMessage.message:type_name -> shared.ChatMessageMessage
	6, // 6: shared.TwitchChatMessage.badges:type_name -> shared.ChatMessageBadge
	7, // 7: shared.TwitchChatMessage.cheer:type_name -> shared.ChatMessageCheer
	8, // 8: shared.TwitchChatMessage.reply:type_name -> shared.ChatMessageReply
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_shared_twitch_chat_message_proto_init() }
func file_shared_twitch_chat_message_proto_init() {
	if File_shared_twitch_chat_message_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_shared_twitch_chat_message_proto_rawDesc), len(file_shared_twitch_chat_message_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_shared_twitch_chat_message_proto_goTypes,
		DependencyIndexes: file_shared_twitch_chat_message_proto_depIdxs,
		EnumInfos:         file_shared_twitch_chat_message_proto_enumTypes,
		MessageInfos:      file_shared_twitch_chat_message_proto_msgTypes,
	}.Build()
	File_shared_twitch_chat_message_proto = out.File
	file_shared_twitch_chat_message_proto_goTypes = nil
	file_shared_twitch_chat_message_proto_depIdxs = nil
}
